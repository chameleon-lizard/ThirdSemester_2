        -:    0:Source:practicum_2.c
        -:    0:Graph:practicum_2.gcno
        -:    0:Data:practicum_2.gcda
        -:    0:Runs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:
        -:    4:enum
        -:    5:{
        -:    6:    STRING_SIZE = 80
        -:    7:};
        -:    8:
        -:    9:int
        1:   10:main (int argc, char *argv[])
        -:   11:{
        -:   12:    // Checking if we actually have the file n the arguments:
        1:   13:    if (argc < 2) {
    #####:   14:        printf("No file specified\n");
    #####:   15:        return 1;
        -:   16:    }
        -:   17:
        -:   18:    // Opening the file, checking if it has been opened:
        1:   19:    FILE *file = fopen(argv[1], "r+");
        1:   20:    if (file == NULL) {
    #####:   21:        printf("Problem opening file.\n");
    #####:   22:        return 1;
        -:   23:    }
        -:   24:
        -:   25:    // Creating string and the buffer for the readed 80-symbol strings:
        1:   26:    char string[STRING_SIZE + 1] = { 0 };
        1:   27:    char buffer[STRING_SIZE + 1] = { 0 };
        -:   28:
        -:   29:    // While we can read, we are reading:
       10:   30:    while (fgets(string, STRING_SIZE + 1, file) != NULL) {
        -:   31:        // Length of the string can be less then 80:
        9:   32:        int length = strlen(string);
        9:   33:        memset(buffer, 0, STRING_SIZE + 1);
        -:   34:
        -:   35:        // Changing the items in strings:
      282:   36:        for (int i = 1; length - i >= 0; i++) {
      273:   37:            buffer[i - 1] = string[length - i];
        -:   38:        }
        -:   39:
        -:   40:        // Writing to the file, changing the pointer to the current place in
        -:   41:        // the file to the beginning of the string and then to the end of
        -:   42:        // the string:
        9:   43:        fseek(file, -length, SEEK_CUR);
        9:   44:    	fputs(&buffer[1], file);
        9:   45:        fseek(file, 1, SEEK_CUR);
        -:   46:    }
        -:   47:
        -:   48:    // Closing the file:
        1:   49:    fclose(file);
        -:   50:
        1:   51:    return 0;
        -:   52:}
